USE DRECARGAS_APUESTATOTAL;

DELIMITER //
CREATE PROCEDURE IF NOT EXISTS SP_INSERTAR_CANAL_COMUNICACION(
    IN _canal VARCHAR (255))
    
	BEGIN
		SET @message = '';
        IF(SELECT COUNT(*) FROM CANAL_COMUNICACION WHERE NOMBRE_CANAL_COMUNICACION = _canal) = 0 THEN
        	INSERT INTO CANAL_COMUNICACION(ID_CANAL_COMUNICACION, NOMBRE_CANAL_COMUNICACION, ESTADO) VALUES (NULL, _canal, 1);

            SET @message = 'REGISTRO EXITOSO';
    	ELSE
        	SET @message = 'EL CANAL DE COMUNICACION YA EXISTE';
    	END IF;

		SELECT @message MENSAJE;
	END
//

DELIMITER //
CREATE TRIGGER IF NOT EXISTS TX_INSERTAR_CANAL_COMUNICACION_AFTER
AFTER INSERT
ON CANAL_COMUNICACION 
FOR EACH ROW 

	BEGIN

    	INSERT INTO HIST_CANAL_COMUNICACION(ID_HIST_CANAL_COMUNICACION, ID_CANAL_COMUNICACION, NOMBRE_CANAL_COMUNICACION, FECHA_CREACION, FECHA_MODIFICACION, FECHA_ELIMINACION, ESTADO) VALUES (NULL, NEW.ID_CANAL_COMUNICACION, NEW.NOMBRE_CANAL_COMUNICACION, NOW(), NULL, NULL, 1);
   
	END
//

DELIMITER //
CREATE PROCEDURE IF NOT EXISTS SP_ACTUALIZAR_CANAL_COMUNICACION(
    IN _id INT,
    IN _canal VARCHAR (255),
    IN _estado INT)
    
	BEGIN
		SET @message = '';
        IF(SELECT COUNT(*) FROM CANAL_COMUNICACION WHERE ID_CANAL_COMUNICACION = _id) <> 0 THEN
        	UPDATE CANAL_COMUNICACION
            SET
                NOMBRE_CANAL_COMUNICACION = _canal, 
                ESTADO = _estado
            WHERE ID_CANAL_COMUNICACION = _id;

            SET @message = 'ACTUALIZADO EXITOSAMENTE';
    	ELSE
        	SET @message = 'EL ID NO EXISTE';
    	END IF;

		SELECT @message MENSAJE;
	END
//


DELIMITER //
CREATE TRIGGER IF NOT EXISTS TX_ACTUALIZAR_CANAL_COMUNICACION_AFTER
AFTER UPDATE
ON CANAL_COMUNICACION 
FOR EACH ROW 

	BEGIN
    	
    	INSERT INTO HIST_CANAL_COMUNICACION(ID_HIST_CANAL_COMUNICACION, ID_CANAL_COMUNICACION, NOMBRE_CANAL_COMUNICACION, FECHA_CREACION, FECHA_MODIFICACION, FECHA_ELIMINACION, ESTADO) VALUES (NULL, OLD.ID_CANAL_COMUNICACION, OLD.NOMBRE_CANAL_COMUNICACION, NULL, NOW(), NULL, OLD.ESTADO);
   
	END
//

DELIMITER //
CREATE PROCEDURE IF NOT EXISTS SP_INSERTAR_USUARIO_PERSONA(
    IN _usuario VARCHAR (255),
	IN _password VARCHAR (255),
	IN _nombre VARCHAR(255),
	IN _apellidopaterno VARCHAR(255),
	IN _apellidomaterno VARCHAR(255),
	IN _dni VARCHAR(255),
	IN _telefono VARCHAR(255),
	IN _idrol VARCHAR(255))
    
	BEGIN
		SET @message = '';
        IF(SELECT COUNT(*) FROM USUARIO WHERE NOMBRE_USUARIO = _usuario) = 0 THEN
			IF(SELECT COUNT(*) FROM PERSONA WHERE DNI_PERSONA = _dni) = 0 THEN
				IF(SELECT COUNT(*) FROM ROL WHERE ID_ROL = _idrol) <> 0 THEN
					INSERT INTO PERSONA(ID_PERSONA, NOMBRE_PERSONA, APELLIDO_PATERNO_PERSONA, APELLIDO_MATERNO_PERSONA, DNI_PERSONA, TELEFONO_PERSONA, ESTADO) VALUES (NULL, _nombre, _apellidopaterno, _apellidomaterno, _dni, _telefono, 1);
					
					INSERT INTO USUARIO(ID_USUARIO, NOMBRE_USUARIO, PASSWORD_USUARIO, ID_PERSONA, ID_ROL, MOTIVO_BAJA, ESTADO) SELECT NULL, _usuario, _password, ID_PERSONA, _idrol, NULL, 1 FROM PERSONA WHERE DNI_PERSONA = _dni;

					IF(_idrol = 3) THEN
						INSERT INTO BILLETERA_VIRTUAL(ID_BILLETERA_VIRTUAL, SALDO_BILLETERA_VIRTUAL, ID_USUARIO, ESTADO) SELECT NULL, 0.00, ID_USUARIO, 1 FROM USUARIO WHERE NOMBRE_USUARIO = _usuario;
					END IF;

					SET @message = 'REGISTRO EXITOSO';
				ELSE
					SET @message = 'EL ROL NO ESTA REGISTRADO';
				END IF;
				
			ELSE
				SET @message = 'EL DNI YA ESTA REGISTRADO';
			END IF;
    	ELSE
        	SET @message = 'EL USUARIO YA EXISTE';
    	END IF;

		SELECT @message MENSAJE;
	END
//

DELIMITER //
CREATE TRIGGER IF NOT EXISTS TX_INSERTAR_PERSONA_AFTER
AFTER INSERT
ON PERSONA 
FOR EACH ROW 

	BEGIN

    	INSERT INTO HIST_PERSONA(ID_HIST_PERSONA, ID_PERSONA, NOMBRE_PERSONA, APELLIDO_PATERNO_PERSONA, APELLIDO_MATERNO_PERSONA, DNI_PERSONA, TELEFONO_PERSONA, FECHA_CREACION, FECHA_MODIFICACION, FECHA_ELIMINACION, ESTADO) 
		VALUES (NULL, NEW.ID_PERSONA, NEW.NOMBRE_PERSONA, NEW.APELLIDO_PATERNO_PERSONA, NEW.APELLIDO_MATERNO_PERSONA, NEW.DNI_PERSONA, NEW.TELEFONO_PERSONA, NOW(), NULL, NULL, NEW.ESTADO);
   
	END
//

DELIMITER //
CREATE TRIGGER IF NOT EXISTS TX_INSERTAR_USUARIO_AFTER
AFTER INSERT
ON USUARIO 
FOR EACH ROW 

	BEGIN

    	INSERT INTO HIST_USUARIO(ID_HIST_USUARIO, ID_USUARIO, NOMBRE_USUARIO, PASSWORD_USUARIO, FECHA_CREACION, FECHA_MODIFICACION, FECHA_ELIMINACION, ID_PERSONA, ID_ROL, MOTIVO_BAJA, ESTADO) 
		VALUES (NULL, NEW.ID_USUARIO, NEW.NOMBRE_USUARIO, NEW.PASSWORD_USUARIO, NOW(), NULL, NULL, NEW.ID_PERSONA, NEW.ID_ROL, NULL, NEW.ESTADO);
   
	END
//

DELIMITER //
CREATE TRIGGER IF NOT EXISTS TX_INSERTAR_BILLETERA_VIRTUAL_AFTER
AFTER INSERT
ON BILLETERA_VIRTUAL 
FOR EACH ROW 

	BEGIN

    	INSERT INTO HIST_BILLETERA_VIRTUAL(ID_HIST_BILLETERA_VIRTUAL, ID_BILLETERA_VIRTUAL, SALDO_BILLETERA_VIRTUAL, ID_USUARIO, FECHA_CREACION, FECHA_MODIFICACION, FECHA_ELIMINACION, ESTADO) 
		VALUES (NULL, NEW.ID_BILLETERA_VIRTUAL, NEW.SALDO_BILLETERA_VIRTUAL, NEW.ID_USUARIO, NOW(), NULL, NULL, NEW.ESTADO);
   
	END
//

DELIMITER //
CREATE PROCEDURE IF NOT EXISTS SP_BUSCAR_USUARIO_PERSONA()
    
	BEGIN
        SELECT U.NOMBRE_USUARIO, P.NOMBRE_PERSONA, P.APELLIDO_PATERNO_PERSONA, P.APELLIDO_MATERNO_PERSONA, P.DNI_PERSONA, P.TELEFONO_PERSONA, BV.SALDO_BILLETERA_VIRTUAL, HU.FECHA_CREACION FROM USUARIO U
INNER JOIN PERSONA P ON P.ID_PERSONA = U.ID_PERSONA
INNER JOIN BILLETERA_VIRTUAL BV ON BV.ID_USUARIO = U.ID_USUARIO
INNER JOIN HIST_USUARIO HU ON HU.ID_USUARIO = U.ID_USUARIO
WHERE HU.FECHA_CREACION IS NOT NULL;
	END
//

DELIMITER //
CREATE PROCEDURE IF NOT EXISTS SP_VALIDAR_USUARIO(
    IN _usuario VARCHAR (255),
	IN _password VARCHAR (255))
    
	BEGIN
    	SET @mensaje = '';
		SELECT COUNT(*), PASSWORD_USUARIO, ID_ROL INTO @cont, @clave, @rol  FROM usuario WHERE NOMBRE_USUARIO = _usuario;

        IF(@cont <> 0)  THEN
			IF (@clave  = _password) THEN
            	IF(@rol <> 3) THEN
                	SET @mensaje = 'INGRESO EXITOSAMENTE';
                ELSE
                	SET @mensaje = 'ESTE USUARIO NO TIENE ROL PARA ESTE SISTEMA';
                END IF;
			ELSE
				SET @mensaje = 'CLAVE INCORRECTA';
			END IF;
    	ELSE
        	SET @mensaje = 'EL USUARIO NO EXISTE';
    	END IF;
        
        SELECT @mensaje MENSAJE;
	END
//

DELIMITER //
CREATE PROCEDURE IF NOT EXISTS SP_INSERTAR_RECARGA_TRANSACCION(
	IN _codigovoucher VARCHAR(255),
    IN _montorecarga DECIMAL(20, 2),
	IN _banco VARCHAR (255),
	IN _tipotransaccion VARCHAR(255),
	IN _canalcomunicacion VARCHAR(255),
	IN _voucher VARCHAR(255),
	IN _fechaoperacion VARCHAR(255),
	IN _usuariojugador VARCHAR(255),
	IN _usuarioregistrante VARCHAR(255),
	IN _observacion VARCHAR(255))
    
	BEGIN
		SET @mensaje = '';
		
		SELECT COUNT(*), U.ID_USUARIO INTO @cont, @idusuariojugador FROM USUARIO U 
		INNER JOIN PERSONA P ON P.ID_PERSONA = U.ID_PERSONA 
		WHERE P.DNI_PERSONA = _usuariojugador AND ID_ROL = 3;

        IF(SELECT COUNT(*) FROM BANCO WHERE ID_BANCO = _banco) = 0 THEN
			SET @mensaje = 'EL BANCO NO EXISTE';
		ELSEIF(SELECT COUNT(*) FROM TIPO_TRANSACCION WHERE ID_TIPO_TRANSACCION = _tipotransaccion) = 0 THEN
			SET @mensaje = 'EL TIPO DE TRANSACCION NO EXISTE';
		ELSEIF(SELECT COUNT(*) FROM CANAL_COMUNICACION WHERE ID_CANAL_COMUNICACION = _canalcomunicacion) = 0 THEN
			SET @mensaje = 'EL CANAL DE COMUNICACION NO EXISTE';
		ELSEIF(_voucher = '') THEN
			SET @mensaje = 'SUBA UN PDF';
		ELSEIF(@cont = 0) THEN
			SET @mensaje = 'EL JUGADOR NO EXISTE';
		ELSEIF(SELECT COUNT(*) FROM USUARIO WHERE ID_USUARIO = _usuarioregistrante) = 0 THEN
			SET @mensaje = 'EL PROMOTOR DE VENTAS NO EXISTE';
    	ELSE
			
        	INSERT INTO RECARGA_TRANSACCION(ID_RECARGA_TRANSACCION, COD_PAGO_RECARGA_TRANSACCION, SALDO_RECARGA_TRANSACCION, ID_BANCO, ID_TIPO_TRANSACCION, ID_CANAL_COMUNICACION, VOUCHER_RECARGA_TRANSACCION, FECHA_OPERACION_RECARGA_TRANSACCION, ID_USUARIO, ID_USUARIO_REGISTRANTE, OBSERVACION_RECARGA_TRANSACCION, MOTIVO_BAJA, ESTADO)
			VALUES (NULL, _codigovoucher, _montorecarga, _banco, _tipotransaccion, _canalcomunicacion, _voucher, _fechaoperacion, @idusuariojugador, _usuarioregistrante, _observacion, NULL, 1);

			SELECT ID_BILLETERA_VIRTUAL, SALDO_BILLETERA_VIRTUAL, ID_USUARIO, ESTADO INTO @idbilletera, @saldobilletera, @idusuariobilletera, @estadobilletera FROM BILLETERA_VIRTUAL WHERE ID_USUARIO = @idusuariojugador;

			UPDATE BILLETERA_VIRTUAL
			SET
				SALDO_BILLETERA_VIRTUAL = (@saldobilletera + _montorecarga)
			WHERE ID_USUARIO = @idusuariojugador; 

			SET @mensaje = 'RECARGA EXITOSA';
    	END IF;

		SELECT @mensaje MENSAJE;
	END
//

DELIMITER //
CREATE TRIGGER IF NOT EXISTS TX_INSERTAR_BILLETERA_VIRTUAL_AFTER_UPDATE
AFTER UPDATE
ON BILLETERA_VIRTUAL 
FOR EACH ROW 

	BEGIN

    	INSERT INTO HIST_BILLETERA_VIRTUAL(ID_HIST_BILLETERA_VIRTUAL, ID_BILLETERA_VIRTUAL, SALDO_BILLETERA_VIRTUAL, ID_USUARIO, FECHA_CREACION, FECHA_MODIFICACION, FECHA_ELIMINACION, ESTADO) 
		VALUES (NULL, OLD.ID_BILLETERA_VIRTUAL, NEW.SALDO_BILLETERA_VIRTUAL, OLD.ID_USUARIO, NULL, NOW(), NULL, OLD.ESTADO);
   
	END
//


DELIMITER //
CREATE TRIGGER IF NOT EXISTS TX_INSERTAR_RECARGA_TRANSACCION_AFTER
AFTER INSERT
ON RECARGA_TRANSACCION 
FOR EACH ROW 

	BEGIN
    	INSERT INTO HIST_RECARGA_TRANSACCION(ID_HIST_RECARGA_TRANSACCION, ID_RECARGA_TRANSACCION, COD_PAGO_RECARGA_TRANSACCION, SALDO_RECARGA_TRANSACCION, ID_BANCO, ID_TIPO_TRANSACCION, ID_CANAL_COMUNICACION, VOUCHER_RECARGA_TRANSACCION, FECHA_OPERACION_RECARGA_TRANSACCION, ID_USUARIO, ID_USUARIO_REGISTRANTE, OBSERVACION_RECARGA_TRANSACCION, MOTIVO_BAJA, FECHA_CREACION, FECHA_MODIFICACION, FECHA_ELIMINACION, ESTADO)
		VALUES (NULL, NEW.ID_RECARGA_TRANSACCION, NEW.COD_PAGO_RECARGA_TRANSACCION, NEW.SALDO_RECARGA_TRANSACCION, NEW.ID_BANCO, NEW.ID_TIPO_TRANSACCION, NEW.ID_CANAL_COMUNICACION, NEW.VOUCHER_RECARGA_TRANSACCION, NEW.FECHA_OPERACION_RECARGA_TRANSACCION, NEW.ID_USUARIO, NEW.ID_USUARIO_REGISTRANTE, NEW.OBSERVACION_RECARGA_TRANSACCION, NEW.MOTIVO_BAJA, NOW(), NULL, NULL, NEW.ESTADO);
   
	END
//

DELIMITER //
CREATE PROCEDURE IF NOT EXISTS SP_OBTENER_RECIENTES_RECARGA_TRANSACCION()
    
	BEGIN
		SELECT RT.ID_RECARGA_TRANSACCION, RT.COD_PAGO_RECARGA_TRANSACCION, RT.SALDO_RECARGA_TRANSACCION, B.NOMBRE_BANCO, TT.NOMBRE_TIPO_TRANSACCION, CC.NOMBRE_CANAL_COMUNICACION, RT.FECHA_OPERACION_RECARGA_TRANSACCION, U.NOMBRE_USUARIO  FROM RECARGA_TRANSACCION RT
		INNER JOIN BANCO B ON B.ID_BANCO = RT.ID_BANCO
        INNER JOIN TIPO_TRANSACCION TT ON TT.ID_TIPO_TRANSACCION = RT.ID_TIPO_TRANSACCION
        INNER JOIN CANAL_COMUNICACION CC ON CC.ID_CANAL_COMUNICACION = RT.ID_CANAL_COMUNICACION
        INNER JOIN USUARIO U ON U.ID_USUARIO = RT.ID_USUARIO
		WHERE RT.ESTADO = 1 ORDER BY RT.ID_RECARGA_TRANSACCION DESC LIMIT 5;
	END
//

DELIMITER //
CREATE PROCEDURE IF NOT EXISTS SP_OBTENER_BANCO()
    
	BEGIN
		SELECT ID_BANCO, NOMBRE_BANCO FROM BANCO WHERE ESTADO = 1;
	END
//

DELIMITER //
CREATE PROCEDURE IF NOT EXISTS SP_OBTENER_TIPO_TRANSACCION()
    
	BEGIN
		SELECT ID_TIPO_TRANSACCION, NOMBRE_TIPO_TRANSACCION FROM TIPO_TRANSACCION WHERE ESTADO = 1;
	END
//

DELIMITER //
CREATE PROCEDURE IF NOT EXISTS SP_OBTENER_CANAL_COMUNICACION()
    
	BEGIN
		SELECT ID_CANAL_COMUNICACION, NOMBRE_CANAL_COMUNICACION FROM CANAL_COMUNICACION WHERE ESTADO = 1;
	END
//

DELIMITER //
CREATE PROCEDURE IF NOT EXISTS SP_OBTENER_MONTO_TOTAL_RECARGA_TRANSACCION_DIA()
    
	BEGIN
		SELECT SUM(SALDO_RECARGA_TRANSACCION) SALDO_TOTAL_RECARGADO, COUNT(*) TOTAL_RECARGAS FROM RECARGA_TRANSACCION 
		WHERE FECHA_OPERACION_RECARGA_TRANSACCION > CURRENT_DATE AND FECHA_OPERACION_RECARGA_TRANSACCION < CURRENT_DATE + INTERVAL 1 DAY AND ESTADO = 1;
	END
//

DELIMITER //
CREATE PROCEDURE IF NOT EXISTS SP_OBTENER_ROL()
    
	BEGIN
		SELECT ID_ROL, NOMBRE_ROL FROM ROL WHERE ESTADO = 1;
	END
//

DELIMITER //
CREATE PROCEDURE IF NOT EXISTS SP_OBTENER_RECARGA_TRANSACCION_PERSONA(
	IN _dni VARCHAR(255))
    
	BEGIN
		SELECT RT.ID_RECARGA_TRANSACCION, RT.COD_PAGO_RECARGA_TRANSACCION, RT.SALDO_RECARGA_TRANSACCION, B.NOMBRE_BANCO, TT.NOMBRE_TIPO_TRANSACCION, CC.NOMBRE_CANAL_COMUNICACION, RT.FECHA_OPERACION_RECARGA_TRANSACCION, U.NOMBRE_USUARIO  FROM RECARGA_TRANSACCION RT
		INNER JOIN BANCO B ON B.ID_BANCO = RT.ID_BANCO
        INNER JOIN TIPO_TRANSACCION TT ON TT.ID_TIPO_TRANSACCION = RT.ID_TIPO_TRANSACCION
        INNER JOIN CANAL_COMUNICACION CC ON CC.ID_CANAL_COMUNICACION = RT.ID_CANAL_COMUNICACION
        INNER JOIN USUARIO U ON U.ID_USUARIO = RT.ID_USUARIO
        INNER JOIN PERSONA P ON P.ID_PERSONA = U.ID_PERSONA
		WHERE RT.ESTADO = 1 AND P.DNI_PERSONA = _dni ORDER BY RT.ID_RECARGA_TRANSACCION DESC;
	END
//

DELIMITER //
CREATE PROCEDURE IF NOT EXISTS SP_OBTENER_DATO_USUARIO_PERSONA_BILLETERA_VIRTUAL(
	IN _dni VARCHAR(255))
    
	BEGIN
		SELECT U.NOMBRE_USUARIO, P.NOMBRE_PERSONA, P.APELLIDO_PATERNO_PERSONA, P.DNI_PERSONA, P.TELEFONO_PERSONA, BT.SALDO_BILLETERA_VIRTUAL FROM BILLETERA_VIRTUAL BT
        INNER JOIN USUARIO U ON U.ID_USUARIO = BT.ID_USUARIO
        INNER JOIN PERSONA P ON P.ID_PERSONA = U.ID_PERSONA
		WHERE U.ESTADO = 1 AND P.DNI_PERSONA = _dni AND U.ID_ROL = 3;
	END
//